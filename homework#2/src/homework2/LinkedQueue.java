package homework2;/** * Program Name: ArrayQueue.java * @author Roei Burstein * Current Date: Monday, February 5, 2018 * Computer Operating System: Mac OS High Sierra Version 10.13.2 * Compiler: Eclipse Oxygen 4.7.0 * <p> * Description: This program is the linked list implementation of a queue. * <p> */public class LinkedQueue<T> implements QueueInterface<T> {	private Node frontNode; // References node at front of queue	private Node backNode; // References node at back of queue	private int count = 0;	/**	 * Default Constructor	 */	public LinkedQueue() {		frontNode = null;		backNode = null;	} // end default constructor	/**	 * Adds a new entry to the back of this queue.	 * 	 * @param newEntry	 *            An object to be added.	 * @return True if successfully added the newEntry, false otherwise	 */	public boolean enqueue(T newEntry) { // Add node to queue		Node temp = backNode;		backNode = new Node(newEntry);		if (isEmpty())			frontNode = backNode;		else			temp.next = backNode;		count++;		return true;	} // end enqueue	/**	 * Retrieves the entry at the front of this queue.	 * 	 * @return The object at the front of the queue or null if the queue is empty.	 */	public T peekFront() {		if (isEmpty())			return null;		else			return frontNode.getData();	} // end getFront	/**	 * Retrieves the entry at the front of this queue.	 * 	 * @return The object at the front of the queue or null if the queue is empty.	 */	public T dequeue() { // Remove node from queue		T front = peekFront();		if (count > 0) {			front = frontNode.getData();			frontNode = frontNode.getNextNode();			--count;		} // end if		if (isEmpty())			backNode = null;		return front;	} // end dequeue	/**	 * Detects whether this queue is empty.	 * 	 * @return True if the queue is empty, or false otherwise.	 */	public boolean isEmpty() {		return frontNode == null;	} // end isEmpty	/**	 * Returns number of items in this queue	 * 	 * @return Number of items	 */	public int size() {		return count;	} // end size	/**	 * Checks if LinkedQueue input is equal to the local one	 * 	 * @param obj	 *            LinkedQueue object to compare to local one	 * @return True if objects are equal, or false otherwise	 */	@Override	public boolean equals(Object obj) {		if (!(obj instanceof LinkedQueue))			return false;		LinkedQueue objToCompare = (LinkedQueue) obj;		if (!(this.size() == objToCompare.size()))			return false;		Node a = this.frontNode;		Node b = objToCompare.frontNode;		for (int i = 0; i < this.size(); i++) {			if (!(a.getData().equals(b.getData())))				return false;			a = a.getNextNode();			b = b.getNextNode();		} // end for		return true;	} // end equals	private class Node {		private T data; // Entry in stack		private Node next; // Link to next node		/**		 * Node constructor with data parameter.		 * 		 * @param dataPortion		 *            Data of Node object.		 */		private Node(T dataPortion) {			this(dataPortion, null);		} // end constructor		/**		 * Node constructor with both data parameter and next Node Object.		 * 		 * @param dataPortion		 *            Data of Node object.		 * @param linkPortion		 *            Link to next Node Object.		 */		private Node(T dataPortion, Node linkPortion) {			data = dataPortion;			next = linkPortion;		} // end constructor		/**		 * Gets data of Node object.		 * 		 * @return Data of Node object.		 */		private T getData() {			return data;		} // end getData		/**		 * Sets the data variable of the Node object.		 * 		 * @param newData		 *            Data object to save into variable.		 */		private void setData(T newData) {			data = newData;		} // end setData		/**		 * Gets the next Node in the linked list.		 * 		 * @return The next Node.		 */		private Node getNextNode() {			return next;		} // end getNextNode		/**		 * Sets the next Node in the list.		 * 		 * @param nextNode		 *            Next Node in the list.		 */		private void setNextNode(Node nextNode) {			next = nextNode;		} // end setNextNode	} // end Node} // end LinkedQueue