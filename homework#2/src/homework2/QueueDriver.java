package homework2;import java.util.ArrayList;/** * Program Name: ArrayQueue.java * @author Roei Burstein * Current Date: Monday, February 5, 2018 * Computer Operating System: Mac OS High Sierra Version 10.13.2 * Compiler: Eclipse Oxygen 4.7.0 * <p> * Description: This program is the driver and tester of the Queue classes. * <p> */public class QueueDriver {	public static void main(String[] args) {		ArrayList<String> stringList = new ArrayList<String>();		for (char alphabet = 'a'; alphabet <= 'h'; alphabet++)			stringList.add(Character.toString(alphabet));		LinkedQueue<String> stringLinkedQueue = new LinkedQueue<String>();		System.out.println("Testing a queue of Strings: ");		queueTestOperations(stringLinkedQueue, stringList);		ArrayList<Integer> integerArrayList = new ArrayList<Integer>();		for (Integer i = 1; i < 8; i++)			integerArrayList.add(i); // adds integers 1-7 to list		LinkedQueue<Integer> integerLinkedQueue = new LinkedQueue<Integer>();		System.out.println("Testing a queue of Integers: ");		queueTestOperations(integerLinkedQueue, integerArrayList);		equalsTester(stringList);		extraQueueTester();	} // end main	/**	 * Tests Queue operations	 * 	 * @param myQueue	 *            Queue of any datatype	 * @param myList	 *            ArrayList of any datatype	 */	public static <T> void queueTestOperations(QueueInterface<T> myQueue, ArrayList<T> myList) {		System.out.println("\n\nisEmpty() returns " + myQueue.isEmpty() + "\n");		for (T i : myList) {			if (myQueue.enqueue(i))				System.out.println("Successfully added " + i);			else				System.out.println("UNABLE to enqueue " + i);		}		System.out.println("The Queue size = " + myQueue.size());		System.out.println("\nisEmpty() returns " + myQueue.isEmpty() + "\n");		System.out.println("\n\nTesting getFront and dequeue:\n");		while (!myQueue.isEmpty()) {			T front = myQueue.peekFront();			System.out.println(front + " is at the front of the queue.");			front = myQueue.dequeue();			System.out.println(front + " is removed from the front of the queue.\n");		} // end while		System.out.print("\nThe queue should be empty: ");		System.out.println("isEmpty() returns " + myQueue.isEmpty() + "\n\n");		System.out.println("myQueue.getFront() returns " + myQueue.peekFront());		System.out.println("myQueue.dequeue() returns " + myQueue.dequeue() + "\n");		System.out.println("\nEnd of Queue Test\n");	} // end testQueueOperations	/**	 * Tests the equals methods of ArrayQueue and LinkedQueue	 * 	 * @param list	 *            ArrayList of Strings	 */	public static void equalsTester(ArrayList<String> list) {		ArrayQueue<String> arrayQueue1 = new ArrayQueue<String>();		ArrayQueue<String> arrayQueue2 = new ArrayQueue<String>();		LinkedQueue<String> linkedQueue1 = new LinkedQueue<String>();		LinkedQueue<String> linkedQueue2 = new LinkedQueue<String>();		for (String s : list) {			arrayQueue1.enqueue(s + "A");			arrayQueue2.enqueue(s + "A");			linkedQueue1.enqueue(s + "A");			linkedQueue2.enqueue(s + "A");		}		for (int i = 0; i < arrayQueue2.size(); i++) {			arrayQueue2.enqueue(arrayQueue2.dequeue());		}		System.out.println("The result of calling equals for the ArrayQueues = " + arrayQueue1.equals(arrayQueue2));		System.out.println("The result of calling equals for the LinkedQueues = " + linkedQueue1.equals(linkedQueue2));		arrayQueue2.enqueue(list.get(0));		linkedQueue2.enqueue(list.get(0));		System.out.println("After enqueuing one more, the result of calling equals for the ArrayQueues = "				+ arrayQueue1.equals(arrayQueue2));		System.out.println("After enqueuing one more, the result of calling equals for the LinkedQueues = "				+ linkedQueue1.equals(linkedQueue2));	}	/**	 * Additional Queue functionality tester	 */	public static void extraQueueTester() {		LinkedQueue<Double> doubQueue = new LinkedQueue<>();		doubQueue.enqueue(new Double(1.2));		doubQueue.enqueue(new Double(8.9));		System.out.println("\nTesting Double LinkedQueue: ");		System.out.println("Testing dequeuing Double LinkedQueue: " + doubQueue.dequeue());		System.out.println("Testing dequeuing Double LinkedQueue: " + doubQueue.dequeue());		System.out.println("Double LinkedQueue's size is " + doubQueue.size());		System.out.println(				"Testing equals for empty LinkedQueues returns " + doubQueue.equals(new LinkedQueue<Double>()));		System.out				.println("Testing enqueuing Double LinkedQueue after emptying: " + doubQueue.enqueue(new Double(3.4)));		System.out.println("Double LinkedQueue's size is now " + doubQueue.size());		System.out.println("\nTesting Double ArrayQueue: ");		ArrayQueue<Double> doubQueue2 = new ArrayQueue<>();		for (int i = 0; i < 14; ++i) {			if (doubQueue2.enqueue(100. + i)) // uses autoboxing				System.out.println("Successfully enqueued " + (100. + i));			else {				System.out.println("Unable to enqueue " + (100. + i));				System.out.println("Dequeuing " + doubQueue2.dequeue());				doubQueue2.enqueue(100. + i);			}			System.out.println("ArrayQueue size is " + doubQueue2.size());		}		System.out.println("Testing emptying the ArrayQueue:");		while (!doubQueue2.isEmpty())			System.out.println("Dequeuing " + doubQueue2.dequeue() + " size is now " + doubQueue2.size());		System.out				.println("Testing equals for empty ArrayQueues returns " + doubQueue2.equals(new ArrayQueue<Double>()));		System.out.println("Testing enqueuing Double ArrayQueue after emptying: " + doubQueue2.enqueue(18.0));		System.out.println("Double ArrayQueue now has: " + doubQueue2.peekFront());		System.out.println("Double ArrayQueue's size is " + doubQueue2.size());	} // end extraQueueTester/* EXECUTION RESULTS:Testing a queue of Strings: isEmpty() returns trueSuccessfully added aSuccessfully added bSuccessfully added cSuccessfully added dSuccessfully added eSuccessfully added fSuccessfully added gSuccessfully added hThe Queue size = 8isEmpty() returns falseTesting getFront and dequeue:a is at the front of the queue.a is removed from the front of the queue.b is at the front of the queue.b is removed from the front of the queue.c is at the front of the queue.c is removed from the front of the queue.d is at the front of the queue.d is removed from the front of the queue.e is at the front of the queue.e is removed from the front of the queue.f is at the front of the queue.f is removed from the front of the queue.g is at the front of the queue.g is removed from the front of the queue.h is at the front of the queue.h is removed from the front of the queue.The queue should be empty: isEmpty() returns truemyQueue.getFront() returns nullmyQueue.dequeue() returns nullEnd of Queue TestTesting a queue of Integers: isEmpty() returns trueSuccessfully added 1Successfully added 2Successfully added 3Successfully added 4Successfully added 5Successfully added 6Successfully added 7The Queue size = 7isEmpty() returns falseTesting getFront and dequeue:1 is at the front of the queue.1 is removed from the front of the queue.2 is at the front of the queue.2 is removed from the front of the queue.3 is at the front of the queue.3 is removed from the front of the queue.4 is at the front of the queue.4 is removed from the front of the queue.5 is at the front of the queue.5 is removed from the front of the queue.6 is at the front of the queue.6 is removed from the front of the queue.7 is at the front of the queue.7 is removed from the front of the queue.The queue should be empty: isEmpty() returns truemyQueue.getFront() returns nullmyQueue.dequeue() returns nullEnd of Queue TestThe result of calling equals for the ArrayQueues = trueThe result of calling equals for the LinkedQueues = trueAfter enqueuing one more, the result of calling equals for the ArrayQueues = falseAfter enqueuing one more, the result of calling equals for the LinkedQueues = falseTesting Double LinkedQueue: Testing dequeuing Double LinkedQueue: 1.2Testing dequeuing Double LinkedQueue: 8.9Double LinkedQueue's size is 0Testing equals for empty LinkedQueues returns trueTesting enqueuing Double LinkedQueue after emptying: trueDouble LinkedQueue's size is now 1Testing Double ArrayQueue: Successfully enqueued 100.0ArrayQueue size is 1Successfully enqueued 101.0ArrayQueue size is 2Successfully enqueued 102.0ArrayQueue size is 3Successfully enqueued 103.0ArrayQueue size is 4Successfully enqueued 104.0ArrayQueue size is 5Successfully enqueued 105.0ArrayQueue size is 6Successfully enqueued 106.0ArrayQueue size is 7Successfully enqueued 107.0ArrayQueue size is 8Successfully enqueued 108.0ArrayQueue size is 9Successfully enqueued 109.0ArrayQueue size is 10Unable to enqueue 110.0Dequeuing 100.0ArrayQueue size is 10Unable to enqueue 111.0Dequeuing 101.0ArrayQueue size is 10Unable to enqueue 112.0Dequeuing 102.0ArrayQueue size is 10Unable to enqueue 113.0Dequeuing 103.0ArrayQueue size is 10Testing emptying the ArrayQueue:Dequeuing 104.0 size is now 9Dequeuing 105.0 size is now 8Dequeuing 106.0 size is now 7Dequeuing 107.0 size is now 6Dequeuing 108.0 size is now 5Dequeuing 109.0 size is now 4Dequeuing 110.0 size is now 3Dequeuing 111.0 size is now 2Dequeuing 112.0 size is now 1Dequeuing 113.0 size is now 0Testing equals for empty ArrayQueues returns trueTesting enqueuing Double ArrayQueue after emptying: trueDouble ArrayQueue now has: 18.0Double ArrayQueue's size is 1*/} // end Driver