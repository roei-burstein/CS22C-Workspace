package homework2;/** * Program Name: ArrayQueue.java * @author Roei Burstein * Current Date: Monday, February 5, 2018 * Computer Operating System: Mac OS High Sierra Version 10.13.2 * Compiler: Eclipse Oxygen 4.7.0 * <p> * Description: This program is the array implementation of a queue. * <p> */public final class ArrayQueue<T> implements QueueInterface<T> {	private T[] queue; // Circular array of queue entries and one unused location	private int frontIndex; // Index of front entry	private int backIndex; // Index of back entry	private int count;	private static final int DEFAULT_CAPACITY = 10;	private static final int MAX_CAPACITY = 100;	public ArrayQueue() {		this(DEFAULT_CAPACITY);	} // end default constructor	public ArrayQueue(int initialCapacity) {		if (initialCapacity < DEFAULT_CAPACITY)			initialCapacity = DEFAULT_CAPACITY;		else if (initialCapacity > MAX_CAPACITY)			initialCapacity = MAX_CAPACITY;		// The cast is safe because the new array contains null entries		@SuppressWarnings("unchecked")		T[] tempQueue = (T[]) new Object[initialCapacity];		queue = tempQueue;		frontIndex = 0;		backIndex = queue.length - 1;		count = 0;	} // end constructor	/**	 * Adds a new entry to the back of this queue.	 * 	 * @param newEntry	 *            An object to be added.	 * @return True if successfully added the newEntry, false otherwise	 */	public boolean enqueue(T newEntry) {		if (count < queue.length) {			backIndex = (backIndex + 1) % queue.length;			queue[backIndex] = newEntry;			++count;			return true;		} else			return false;	} // end enqueue	/**	 * Retrieves the entry at the front of this queue.	 * 	 * @return The object at the front of the queue or null if the queue is empty.	 */	public T peekFront() {		if (isEmpty())			return null;		return queue[frontIndex];	} // end getFront	/**	 * Removes and returns the entry at the front of this queue.	 * 	 * @return The object at the front of the queue or null if the queue is empty	 *         before the operation.	 */	public T dequeue() {		if (isEmpty())			return null;		else {			--count;			// ADD CODE TO remove data from array HERE!			// BE SURE THIS IS A CIRCULAR ARRAY			// (may need to go the beginning of the array)			T frontItem = queue[frontIndex];			queue[frontIndex] = null;			frontIndex = (frontIndex + 1) % queue.length; // Index of new front of queue			return frontItem;		} // end if	} // end dequeue	/**	 * Detects whether this queue is empty.	 * 	 * @return True if the queue is empty, or false otherwise.	 */	public boolean isEmpty() {		return count == 0;	} // end isEmpty	/**	 * Returns number of items in this queue	 * 	 * @return: Number of items	 */	public int size() {		return count;	} // end size	/**	 * Checks if ArrayQueue input is equal to the local one	 * 	 * @param obj	 *            ArrayQueue object to compare to local one	 * @return True if objects are equal, or false otherwise	 */	@Override	public boolean equals(Object obj) {		if (!(obj instanceof ArrayQueue))			return false;		ArrayQueue objToCompare = (ArrayQueue) obj;		if (!(this.size() == objToCompare.size()))			return false;		for (int i = 0; i < this.size() - 1; i++) {			if (!((this.queue[(this.frontIndex + i) % (this.queue.length)])					.equals((objToCompare.queue[(objToCompare.frontIndex + i) % (objToCompare.queue.length)]))))				return false;		} // end for		return true;	} // end equals} // end ArrayQueue