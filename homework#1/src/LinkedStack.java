/** * Program Name: LinkedStack.java * @author Roei Burstein * Current Date: Tuesday, January 23, 2018 * Computer Operating System: Mac OS High Sierra Version 10.13.2 * Compiler: Eclipse Oxygen 4.7.0 * <p> * Description: This program is the linked list implementation of a stack. * <p> */public class LinkedStack<T> implements StackInterface<T> {	private Node topNode; // References the first node in the chain	private int counter; // INDICATES HOW MANY NODES ARE IN THE STACK	/**	 * Default constructor.	 */	public LinkedStack() {		topNode = null;	} // end default constructor	/**	 * Pushes new item into stack.	 * 	 * @param newEntry	 *            Item to push into stack.	 * @return True if addition was successful, false if it wasn't.	 */	public boolean push(T newEntry) {		topNode = new Node(newEntry, topNode);		counter++;		return true;	} // end push	/**	 * Gets top index of the stack.	 * 	 * @return Item at the top of the stack.	 */	public T peek() {		if (isEmpty())			return null;		else			return topNode.getData();	} // end peek	/**	 * Takes top item out of the stack.	 * 	 * @return Item removed from the stack.	 */	public T pop() {		T top = peek();		if (topNode != null) {			topNode = topNode.getNextNode();			counter--;		}		return top;	} // end pop	/**	 * Checks whether or not the stack is empty.	 * 	 * @return true if the stack is empty, false if the stack is not empty.	 */	public boolean isEmpty() {		return (counter == 0 && topNode == null);	} // end isEmpty	/**	 * Gets the amount of items inside the stack.	 * 	 * @return Amount of items in the stack.	 */	public int size() {		return counter;	} // end size	private class Node {		private T data; // Entry in stack		private Node next; // Link to next node		/**		 * Node constructor with data parameter.		 * 		 * @param dataPortion		 *            Data of Node object.		 */		private Node(T dataPortion) {			this(dataPortion, null);		} // end constructor		/**		 * Node constructor with both data parameter and next Node Object.		 * 		 * @param dataPortion		 *            Data of Node object.		 * @param linkPortion		 *            Link to next Node Object.		 */		private Node(T dataPortion, Node linkPortion) {			data = dataPortion;			next = linkPortion;		} // end constructor		/**		 * Gets data of Node object.		 * 		 * @return Data of Node object.		 */		private T getData() {			return data;		} // end getData		/**		 * Sets the data variable of the Node object.		 * 		 * @param newData		 *            Data object to save into variable.		 */		private void setData(T newData) {			data = newData;		} // end setData		/**		 * Gets the next Node in the linked list.		 * 		 * @return The next Node.		 */		private Node getNextNode() {			return next;		} // end getNextNode		/**		 * Sets the next Node in the list.		 * 		 * @param nextNode		 *            Next Node in the list.		 */		private void setNextNode(Node nextNode) {			next = nextNode;		} // end setNextNode	} // end Node} // end LinkedStack