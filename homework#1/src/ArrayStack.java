import java.util.*;/** * Program Name: ArrayStack.java * @author Roei Burstein * Current Date: Tuesday, January 23, 2018 * Computer Operating System: Mac OS High Sierra Version 10.13.2 * Compiler: Eclipse Oxygen 4.7.0 * <p> * Description: This program is the array implementation of a stack. * <p> */public class ArrayStack<T> implements StackInterface<T> {	private T[] stack; // Array of stack entries	private int topIndex; // Index of top entry	private static final int DEFAULT_CAPACITY = 15;	private static final int MAX_CAPACITY = 100;	/**	 * Default constructor.	 */	public ArrayStack() {		this(DEFAULT_CAPACITY);	} // end default constructor	/**	 * Constructor with capacity parameter.	 * 	 * @param initialCapacity	 *            Capacity of the array stack.	 */	public ArrayStack(int initialCapacity) {		if (initialCapacity > MAX_CAPACITY)			initialCapacity = MAX_CAPACITY;		else if (initialCapacity < DEFAULT_CAPACITY)			initialCapacity = DEFAULT_CAPACITY;		// The cast is safe because the new array contains null entries		@SuppressWarnings("unchecked")		T[] tempStack = (T[]) new Object[initialCapacity];		stack = tempStack;		topIndex = -1;	} // end constructor	/**	 * Pushes new item into stack.	 * 	 * @param newEntry	 *            Item to push into stack.	 * @return True if addition was successful, false if it wasn't.	 */	public boolean push(T newEntry) {		if (topIndex + 1 < stack.length) {			stack[topIndex + 1] = newEntry;			topIndex++;			return true;		}		return false;	} // end push	/**	 * Gets top index of the stack.	 * 	 * @return Item at the top of the stack.	 */	public T peek() {		if (topIndex == -1) // UPDATE FOR HW#1			return null;		else			return stack[topIndex];	} // end peek	/**	 * Takes top item out of the stack.	 * 	 * @return Item removed from the stack.	 */	public T pop() {		if (topIndex == -1) // UPDATE FOR HW#1			return null;		else {			T top = stack[topIndex];			stack[topIndex] = null;			topIndex--;			return top;		} // end if	} // end pop	// TWO MORE METHODS ARE REQUIRED HERE (PART OF EXERCISE 2.1)	/**	 * Checks whether or not the stack is empty.	 * 	 * @return true if the stack is empty, false if the stack is not empty.	 */	public boolean isEmpty() {		return (topIndex == -1);	} // end isEmpty	/**	 * Gets the amount of items inside the stack.	 * 	 * @return Amount of items in the stack.	 */	public int size() {		return topIndex + 1;	} // end size} // end ArrayStack